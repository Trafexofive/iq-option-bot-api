#!/bin/bash

# ======================================================================================
# IQ Option Trading Bot - Docker Environment Setup Script
# ======================================================================================

set -e  # Exit on any error

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
PURPLE='\033[0;35m'
CYAN='\033[0;36m'
NC='\033[0m' # No Color

# Configuration
PROJECT_NAME="iq-option-bot-api"
ENV_FILE=".env"
ENV_EXAMPLE=".env.example"

# ======================================================================================
# Helper Functions
# ======================================================================================

print_header() {
    echo -e "\n${BLUE}========================================================================${NC}"
    echo -e "${BLUE} $1 ${NC}"
    echo -e "${BLUE}========================================================================${NC}\n"
}

print_step() {
    echo -e "\n${GREEN}üìã Step $1: $2${NC}"
    echo -e "${CYAN}================================================================${NC}"
}

print_success() {
    echo -e "${GREEN}‚úÖ $1${NC}"
}

print_warning() {
    echo -e "${YELLOW}‚ö†Ô∏è $1${NC}"
}

print_error() {
    echo -e "${RED}‚ùå $1${NC}"
}

print_info() {
    echo -e "${CYAN}‚ÑπÔ∏è $1${NC}"
}

check_command() {
    if ! command -v $1 &> /dev/null; then
        print_error "$1 is required but not installed."
        return 1
    fi
    return 0
}

# ======================================================================================
# Validation Functions
# ======================================================================================

check_prerequisites() {
    print_step "1" "Checking Prerequisites"
    
    local all_good=true
    
    # Check Docker
    if check_command docker; then
        print_success "Docker is installed: $(docker --version)"
    else
        all_good=false
    fi
    
    # Check Docker Compose
    if check_command "docker compose" || check_command "docker-compose"; then
        print_success "Docker Compose is installed"
    else
        print_error "Docker Compose is required"
        all_good=false
    fi
    
    # Check if Docker is running
    if ! docker info &> /dev/null; then
        print_error "Docker is not running. Please start Docker daemon."
        all_good=false
    else
        print_success "Docker daemon is running"
    fi
    
    # Check available disk space (at least 5GB)
    available_space=$(df . | awk 'NR==2 {print $4}')
    if [ $available_space -lt 5000000 ]; then
        print_warning "Low disk space. At least 5GB recommended."
    else
        print_success "Sufficient disk space available"
    fi
    
    if [ "$all_good" = false ]; then
        print_error "Prerequisites not met. Please install missing components."
        exit 1
    fi
}

setup_environment() {
    print_step "2" "Setting Up Environment Configuration"
    
    # Create .env file if it doesn't exist
    if [ ! -f "$ENV_FILE" ]; then
        if [ -f "$ENV_EXAMPLE" ]; then
            cp "$ENV_EXAMPLE" "$ENV_FILE"
            print_success "Created .env from .env.example"
        else
            print_warning ".env.example not found. Creating minimal .env file."
            cat > "$ENV_FILE" << EOF
# IQ Option Trading Bot Environment Configuration
# Generated by docker-setup.sh on $(date)

# IQ Option API Credentials
IQ_OPTION_EMAIL=your_email@example.com
IQ_OPTION_PASSWORD=your_password

# Database
POSTGRES_PASSWORD=secure_password_$(openssl rand -hex 8)

# Security
SECRET_KEY=$(openssl rand -hex 32)

# Monitoring
GRAFANA_PASSWORD=admin_$(openssl rand -hex 8)

# Environment
TRADING_MODE=demo
LOG_LEVEL=INFO
EOF
            print_success "Created minimal .env file"
        fi
    else
        print_success ".env file already exists"
    fi
    
    # Validate .env file
    if grep -q "your_email@example.com" "$ENV_FILE"; then
        print_warning "Please update .env file with your actual IQ Option credentials"
        print_info "Edit $ENV_FILE and replace placeholder values"
    else
        print_success "Environment file appears to be configured"
    fi
}

create_directories() {
    print_step "3" "Creating Required Directories"
    
    local directories=(
        "data/postgres"
        "data/redis"
        "data/ollama"
        "data/trading"
        "data/logs"
        "data/grafana"
        "data/prometheus"
        "logs/nginx"
        "ssl"
    )
    
    for dir in "${directories[@]}"; do
        mkdir -p "$dir"
        print_info "Created directory: $dir"
    done
    
    # Set proper permissions
    chmod -R 755 data/
    chmod -R 755 logs/
    
    print_success "All directories created successfully"
}

build_images() {
    print_step "4" "Building Docker Images"
    
    echo -e "${CYAN}This may take several minutes on first run...${NC}\n"
    
    # Build images
    if make build; then
        print_success "All Docker images built successfully"
    else
        print_error "Failed to build Docker images"
        exit 1
    fi
}

initialize_services() {
    print_step "5" "Initializing Services"
    
    echo -e "${CYAN}Starting core services...${NC}\n"
    
    # Start core services first
    if make up; then
        print_success "Services started successfully"
    else
        print_error "Failed to start services"
        exit 1
    fi
    
    # Wait for services to be ready
    print_info "Waiting for services to be ready..."
    sleep 30
    
    # Check service health
    check_service_health
}

check_service_health() {
    print_info "Checking service health..."
    
    local services=(
        "http://localhost:8000/api/v1/health:Trading Bot API"
        "http://localhost:8001/health:LLM Gateway"
    )
    
    for service in "${services[@]}"; do
        url="${service%:*}"
        name="${service#*:}"
        
        if curl -f -s "$url" > /dev/null 2>&1; then
            print_success "$name is healthy"
        else
            print_warning "$name is not responding (this might be normal during startup)"
        fi
    done
}

run_tests() {
    print_step "6" "Running Health Tests"
    
    echo -e "${CYAN}Running comprehensive system tests...${NC}\n"
    
    # Run tests using make command
    if make test; then
        print_success "All tests passed!"
    else
        print_warning "Some tests failed (this might be expected without IQ Option credentials)"
        print_info "You can run 'make test' again later after configuring credentials"
    fi
}

print_final_instructions() {
    print_header "üéâ Setup Complete!"
    
    echo -e "${GREEN}Your IQ Option Trading Bot is now running!${NC}\n"
    
    echo -e "${CYAN}üìä Access Points:${NC}"
    echo -e "  ‚Ä¢ Trading Bot API:    ${BLUE}http://localhost:8000/api/v1/docs${NC}"
    echo -e "  ‚Ä¢ LLM Gateway:        ${BLUE}http://localhost:8001/docs${NC}"
    echo -e "  ‚Ä¢ System Health:      ${BLUE}http://localhost/health${NC}"
    
    echo -e "\n${CYAN}üõ†Ô∏è Common Commands:${NC}"
    echo -e "  ‚Ä¢ View logs:          ${BLUE}make logs${NC}"
    echo -e "  ‚Ä¢ View status:        ${BLUE}make status${NC}"
    echo -e "  ‚Ä¢ Stop services:      ${BLUE}make down${NC}"
    echo -e "  ‚Ä¢ Restart:            ${BLUE}make restart${NC}"
    echo -e "  ‚Ä¢ Run demo:           ${BLUE}make demo${NC}"
    echo -e "  ‚Ä¢ Start trading:      ${BLUE}make agent-start${NC}"
    echo -e "  ‚Ä¢ Get help:           ${BLUE}make help${NC}"
    
    echo -e "\n${CYAN}üîß Next Steps:${NC}"
    if grep -q "your_email@example.com" "$ENV_FILE"; then
        echo -e "  1. ${YELLOW}Configure your IQ Option credentials in .env${NC}"
        echo -e "  2. ${BLUE}Run 'make restart' after updating credentials${NC}"
        echo -e "  3. ${BLUE}Run 'make demo' to see the system in action${NC}"
        echo -e "  4. ${BLUE}Run 'make agent-start' to begin trading (demo mode)${NC}"
    else
        echo -e "  1. ${BLUE}Run 'make demo' to see the system in action${NC}"
        echo -e "  2. ${BLUE}Run 'make agent-start' to begin trading${NC}"
        echo -e "  3. ${BLUE}Monitor with 'make agent-status'${NC}"
    fi
    
    echo -e "\n${CYAN}üõ°Ô∏è Safety Reminders:${NC}"
    echo -e "  ‚Ä¢ ${YELLOW}Always start in demo mode first${NC}"
    echo -e "  ‚Ä¢ ${YELLOW}Test thoroughly before using real money${NC}"
    echo -e "  ‚Ä¢ ${YELLOW}Monitor trades closely${NC}"
    echo -e "  ‚Ä¢ ${YELLOW}Set appropriate risk limits${NC}"
    
    echo -e "\n${PURPLE}üìö Documentation:${NC}"
    echo -e "  ‚Ä¢ Configuration:      ${BLUE}IMPLEMENTATION_SUMMARY.md${NC}"
    echo -e "  ‚Ä¢ IQ Option Setup:    ${BLUE}IQ_OPTION_INTEGRATION.md${NC}"
    echo -e "  ‚Ä¢ Makefile Help:      ${BLUE}make help${NC}"
    
    print_header "üöÄ Happy Trading!"
}

# ======================================================================================
# Development Environment Setup
# ======================================================================================

setup_development() {
    print_header "üîß Setting Up Development Environment"
    
    print_info "Installing development tools and dependencies..."
    
    # Start development environment
    if make dev file=infra/docker-compose.dev.yml; then
        print_success "Development environment started"
        
        echo -e "\n${CYAN}üîß Development Tools Available:${NC}"
        echo -e "  ‚Ä¢ Adminer (DB):       ${BLUE}http://localhost:8080${NC}"
        echo -e "  ‚Ä¢ Redis Insight:      ${BLUE}http://localhost:8001${NC}"
        echo -e "  ‚Ä¢ Mailhog:            ${BLUE}http://localhost:8025${NC}"
        echo -e "  ‚Ä¢ Hot Reload:         ${GREEN}Enabled${NC}"
        echo -e "  ‚Ä¢ Debug Port:         ${BLUE}5678${NC}"
        
    else
        print_error "Failed to start development environment"
        exit 1
    fi
}

# ======================================================================================
# Main Execution
# ======================================================================================

main() {
    print_header "üöÄ IQ Option Trading Bot - Docker Setup"
    
    echo -e "${CYAN}This script will set up your complete IQ Option Trading Bot environment${NC}"
    echo -e "${CYAN}including Docker containers, databases, and all required services.${NC}\n"
    
    # Parse command line arguments
    case "${1:-}" in
        "dev"|"development")
            check_prerequisites
            setup_environment
            create_directories
            build_images
            setup_development
            ;;
        "prod"|"production")
            print_warning "Production setup requires additional configuration"
            print_info "Please review infra/docker-compose.prod.yml before proceeding"
            read -p "Continue with production setup? (y/N): " -n 1 -r
            echo
            if [[ $REPLY =~ ^[Yy]$ ]]; then
                check_prerequisites
                setup_environment
                create_directories
                build_images
                make prod
                print_success "Production environment started"
            else
                print_info "Production setup cancelled"
                exit 0
            fi
            ;;
        "clean")
            print_warning "This will remove all containers, volumes, and data"
            read -p "Are you sure? (y/N): " -n 1 -r
            echo
            if [[ $REPLY =~ ^[Yy]$ ]]; then
                make fclean
                docker system prune -af --volumes
                print_success "Environment cleaned"
            fi
            exit 0
            ;;
        "help"|"-h"|"--help")
            echo "Usage: $0 [OPTION]"
            echo ""
            echo "Options:"
            echo "  (no args)   Setup standard environment"
            echo "  dev         Setup development environment with tools"
            echo "  prod        Setup production environment"
            echo "  clean       Clean up all Docker resources"
            echo "  help        Show this help message"
            exit 0
            ;;
        *)
            # Standard setup
            check_prerequisites
            setup_environment
            create_directories
            build_images
            initialize_services
            run_tests
            print_final_instructions
            ;;
    esac
}

# Run main function with all arguments
main "$@"